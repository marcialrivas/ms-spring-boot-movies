on:
  pull_request:
    branches:
    - master
    types:
    - closed
jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
    - name: Extract version from branch name (for release branches)
      if: startsWith(github.event.pull_request.head.ref, 'release/')
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        VERSION=${BRANCH_NAME#release/}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
    - name: Extract version from branch name (for hotfix branches)
      if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        VERSION=${BRANCH_NAME#hotfix/}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
    - name: Create Release
      uses: thomaseizinger/create-release@1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
        tag_name: ${{ env.RELEASE_VERSION }}
        name: ${{ env.RELEASE_VERSION }}
        draft: false
        prerelease: false
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build, Unit Test And Static Analisi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        java -jar sonar-gate-breaker-all-1.0.1.jar -u $SONAR_TOKEN
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: mrivas/ms-spring-boot-movies:prod-${{ env.RELEASE_VERSION }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
    - name: More testing
      run: echo "More testing"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ms-spring-boot-movies-task-definition.json
        container-name: ms-spring-boot-movies
        image: mrivas/ms-spring-boot-movies:prod-${{ env.RELEASE_VERSION }}
        aws-region: us-east-1
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ms-spring-boot-movies
        cluster: microservices-cinepolisklic-io
        wait-for-service-stability: true
    - name: Merge master into develop branch
      uses: thomaseizinger/create-pull-request@1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        head: master
        base: develop
        title: Merge master into develop branch
        body: |-
          This PR merges the master branch back into develop.
          This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the develop branch.
